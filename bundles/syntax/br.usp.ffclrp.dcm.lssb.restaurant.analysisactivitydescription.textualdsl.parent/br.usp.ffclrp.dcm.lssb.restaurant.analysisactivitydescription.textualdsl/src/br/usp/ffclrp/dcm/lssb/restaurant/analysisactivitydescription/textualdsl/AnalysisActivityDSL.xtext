// automatically generated by Xtext
grammar br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.AnalysisActivityDSL 
    hidden(WS, ML_COMMENT, SL_COMMENT)
    //with org.eclipse.xtext.common.Terminals

import "http://dcm.ffclrp.usp.br/lssb/metamodels/string-list-manipulator.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://dcm.ffclrp.usp.br/lssb/metamodels/analysis-activity-description.ecore" as analysisactivitydescription

Activity returns analysisactivitydescription::Activity:
	'activity'
	name=EString
	ENTITY_START
		('description' description=EString STATEMENT_END)?
		('on' ENTITY_START inputDatasets+=InputDataset ( inputDatasets+=InputDataset )* ENTITY_END )?
		('with' ENTITY_START parameters+=Parameter ( parameters+=Parameter)* ENTITY_END )?
		('produces' ENTITY_START outputDatasets+=OutputDataset ( outputDatasets+=OutputDataset)* ENTITY_END )?
		('readinessContraints' LIST_START readinessContraints+=ReadinessConstraint ( LIST_SEPARATOR readinessContraints+=ReadinessConstraint)* LIST_END )?
		'using' tool=Tool
	ENTITY_END;




ReadinessConstraint returns analysisactivitydescription::ReadinessConstraint:
	MinimunDatasetCardinalityConstraint | MaximunDatasetCardinalityConstraint | MinimunParameterCardinalityConstraint | MaximunParameterCardinalityConstraint | CustomParameterConstraint | CustomDatasetConstraint;

Tool returns analysisactivitydescription::Tool:
	CommandLineTool;

Dataset returns analysisactivitydescription::Dataset:
	InputDataset | OutputDataset;

CommandLineEntryList returns analysisactivitydescription::CommandLineEntryList:
	ToolNameCommandLineEntry | LiteralCommandLineEntryList | DatasetCommandLineEntryList | ParameterCommandLineEntryList;


StringListManipulator returns StringListManipulator:
	Join | PrependEach | AppendEach | AppendListWith | PrependListWith;

EString returns ecore::EString:
	MULTILINE_STRING | STRING | ID ;

Parameter returns analysisactivitydescription::Parameter:
	'parameter'
	name=EString
	':'
	parameterType=ParameterType
	LIST_START
	   minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
	LIST_END
	('=' LIST_START  defaultValue+=EString ( LIST_SEPARATOR defaultValue+=EString)* LIST_END  )?
    STATEMENT_END
    ;

InputDataset returns analysisactivitydescription::InputDataset:
	'dataset'
	name=EString
    ':'
    (mimetype=EString)?
    LIST_START
       minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
    LIST_END
    (
       ENTITY_START
       'remarks' remarks=EString STATEMENT_END
       ENTITY_END 
    )? 
    STATEMENT_END
    ;
	

OutputDataset returns analysisactivitydescription::OutputDataset:
    'dataset'
    name=EString
    ':'
    (mimetype=EString)?
    LIST_START
       minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
    LIST_END
    (
       ENTITY_START
       'remarks' remarks=EString STATEMENT_END
       ENTITY_END 
    )? 
    STATEMENT_END
    ;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

enum ParameterType returns analysisactivitydescription::ParameterType:
				STRING = 'STRING' | INTEGER = 'INTEGER' | REAL = 'REAL';

MinimunDatasetCardinalityConstraint returns analysisactivitydescription::MinimunDatasetCardinalityConstraint:
	'MinimunDatasetCardinalityConstraint'
	ENTITY_START
		('value' value=EBigInteger)?
		'dataset' dataset=[analysisactivitydescription::Dataset|EString]
	ENTITY_END;

MaximunDatasetCardinalityConstraint returns analysisactivitydescription::MaximunDatasetCardinalityConstraint:
	'MaximunDatasetCardinalityConstraint'
	ENTITY_START
		('value' value=EBigInteger)?
		'dataset' dataset=[analysisactivitydescription::Dataset|EString]
	ENTITY_END;

MinimunParameterCardinalityConstraint returns analysisactivitydescription::MinimunParameterCardinalityConstraint:
	'MinimunParameterCardinalityConstraint'
	ENTITY_START
		('value' value=EBigInteger)?
		'parameter' parameter=[analysisactivitydescription::Parameter|EString]
	ENTITY_END;

MaximunParameterCardinalityConstraint returns analysisactivitydescription::MaximunParameterCardinalityConstraint:
	'MaximunParameterCardinalityConstraint'
	ENTITY_START
		('value' value=EBigInteger)?
		'parameter' parameter=[analysisactivitydescription::Parameter|EString]
	ENTITY_END;

CustomParameterConstraint returns analysisactivitydescription::CustomParameterConstraint:
	'CustomParameterConstraint'
	name=EString
	ENTITY_START
		'parameter' parameter=[analysisactivitydescription::Parameter|EString]
	ENTITY_END;

CustomDatasetConstraint returns analysisactivitydescription::CustomDatasetConstraint:
	'CustomDatasetConstraint'
	name=EString
	ENTITY_START
		'dataset' dataset=[analysisactivitydescription::Dataset|EString]
	ENTITY_END;

CommandLineTool returns analysisactivitydescription::CommandLineTool:
	'CommandLineTool'
	name=EString
	ENTITY_START
		('executablePath' executablePath=FilePath)?
		('pipe'
		ENTITY_START
		( 
		  ('stdin' 'from' standardInputStream=[analysisactivitydescription::InputDataset|EString] STATEMENT_END)?
		  & ('stdout' 'to' standardOutputStream=[analysisactivitydescription::OutputDataset|EString] STATEMENT_END)?
		  & ('stderr' 'to' standardErrorStream=[analysisactivitydescription::OutputDataset|EString] STATEMENT_END)?
        )
        ENTITY_END
        )?
        'commandLineTemplate' LIST_START commandLineTemplate+=CommandLineEntryList ( LIST_SEPARATOR commandLineTemplate+=CommandLineEntryList)* LIST_END 

		('returns' ENTITY_START exitCodes+=ExitCode ( exitCodes+=ExitCode)* ENTITY_END )?
	ENTITY_END;

FilePath returns analysisactivitydescription::FilePath:
	EString /* TODO: implement this rule and an appropriate IValueConverter */;

ExitCode returns analysisactivitydescription::ExitCode:
	code=EBigInteger 
	'if'  
    status=TerminationStatus	
	(reportMessage=EString)?
	STATEMENT_END
    ;

ToolNameCommandLineEntry returns analysisactivitydescription::ToolNameCommandLineEntry:
	{analysisactivitydescription::ToolNameCommandLineEntry}
	'toolname'
	(PIPE_TO manipulators+=StringListManipulator)*
    ;

LiteralCommandLineEntryList returns analysisactivitydescription::LiteralCommandLineEntryList:
	{analysisactivitydescription::LiteralCommandLineEntryList}
	'literals'
	LIST_START literals+=EString ( LIST_SEPARATOR literals+=EString)* LIST_END
	( PIPE_TO manipulators+=StringListManipulator)*
    ;

DatasetCommandLineEntryList returns analysisactivitydescription::DatasetCommandLineEntryList:
	'dataset'
	dataset=[analysisactivitydescription::Dataset|EString]
	( PIPE_TO manipulators+=StringListManipulator)*
	;

ParameterCommandLineEntryList returns analysisactivitydescription::ParameterCommandLineEntryList:
	'parameter' 
	parameter=[analysisactivitydescription::Parameter|EString]
	(PIPE_TO manipulators+=StringListManipulator)*
	;
	


Join returns Join:
	'Join' delimiter=EString;

PrependEach returns PrependEach:
	'PrependEach' value=EString;

AppendEach returns AppendEach:
	'AppendEach' value=EString;

AppendListWith returns AppendListWith:
	'AppendListWith' value=EString;

PrependListWith returns PrependListWith:
	'PrependListWith' value=EString;

enum TerminationStatus returns analysisactivitydescription::TerminationStatus:
				SUCCEEDED = 'SUCCEEDED' | FAILED = 'FAILED';
				

terminal ENTITY_START: '{';
terminal ENTITY_END: '}';
terminal STATEMENT_END: ';';
// The following synthetic tokens are used for the indentation-aware blocks
//terminal ENTITY_START: 'synthetic:ENTITY_START';  // increase indentation
//terminal ENTITY_END: 'synthetic:ENTITY_END';      // decrease indentation
terminal DEFINITION_START: "(";
terminal DEFINITION_END: ")";
				
terminal LIST_START: '[';
terminal LIST_END: ']';
terminal LIST_SEPARATOR : ',';

terminal PIPE_TO : '|';


terminal MULTILINE_STRING:
            "'''" -> "'''" 
        ;
        
        
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') (("-")?('a'..'z'|'A'..'Z'|'_'|'0'..'9'))*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING:
            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
        ;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
