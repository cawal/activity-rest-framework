/**
 * generated by Xtext 2.25.0
 */
package br.com.cawal.sddl.tests;

import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.Deployment;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(SDDLInjectorProvider.class)
@SuppressWarnings("all")
public class SDDLParsingTest {
  @Inject
  private ParseHelper<Deployment> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("deployment { ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("of service \"gene-chart-report-by-dataset\" { api-version \"1.1\" }");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("into container \'kode\' {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("base-url \'http://kode.ffcrp.usp.br:8081/david-chart-report-by-dataset\'");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description \'Nice description\' ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Deployment result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
