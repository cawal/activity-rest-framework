grammar br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.AnalysisActivityDSL 
    hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://dcm.ffclrp.usp.br/lssb/metamodels/analysis-activity-description.ecore" as analysisactivitydescription
import "http://dcm.ffclrp.usp.br/lssb/metamodels/string-list-manipulator.ecore" as slm

Activity returns analysisactivitydescription::Activity:
	'activity'
	name=Identifier
	ENTITY_START
		('remark' remark=EString STATEMENT_END)?
		('on' ENTITY_START inputDatasets+=InputDataset ( inputDatasets+=InputDataset )* ENTITY_END )?
		('with' ENTITY_START parameters+=Parameter ( parameters+=Parameter)* ENTITY_END )?
		('produces' ENTITY_START outputDatasets+=OutputDataset ( outputDatasets+=OutputDataset)* ENTITY_END )?
		'using' functionalEntity=FunctionalEntity
	ENTITY_END;




FunctionalEntity returns analysisactivitydescription::FunctionalEntity:
	CommandLineTool;

Dataset returns analysisactivitydescription::Dataset:
	InputDataset | OutputDataset;

CommandLineEntryList returns analysisactivitydescription::CommandLineEntryList:
	ToolNameCommandLineEntry | LiteralCommandLineEntryList | DatasetCommandLineEntryList | ParameterCommandLineEntryList;


StringListManipulator returns slm::StringListManipulator:
	Join | PrependEach | AppendEach | AppendListWith | PrependListWith;

EString returns ecore::EString:
	MULTILINE_STRING | STRING | ID ;
	

Identifier returns ecore::EString:
	ID
;	

Parameter returns analysisactivitydescription::Parameter:
	'parameter'
	name=Identifier
	':'
	parameterType=ParameterType
	LIST_START
	   minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
	LIST_END
	('=' LIST_START  defaultValue+=EString ( LIST_SEPARATOR defaultValue+=EString)* LIST_END  )?
	(
	    ENTITY_START
        ('remark' remark=EString STATEMENT_END)?
        (
           'constraints' 
           LIST_START constraints+=Constraint 
               (LIST_SEPARATOR constraints+=Constraint)* 
           LIST_END
        )?
	    ENTITY_END
	)?
    STATEMENT_END
    ;

InputDataset returns analysisactivitydescription::InputDataset:
    'dataset'
    name=Identifier
    ':'
    (mimetype=EString)?
    LIST_START
       minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
    LIST_END
    (
       ENTITY_START
        ('remark' remark=EString STATEMENT_END)?
        (
            'constraints' LIST_START 
                constraints+=Constraint 
                (LIST_SEPARATOR constraints+=Constraint)* 
                LIST_END STATEMENT_END
        )?
      ENTITY_END 
    )? 
    STATEMENT_END
    ;
	

OutputDataset returns analysisactivitydescription::OutputDataset:
    'dataset'
    name=Identifier
    ':'
    (mimetype=EString)?
    LIST_START
       minimumCardinality=EBigInteger LIST_SEPARATOR  maximumCardinality=EBigInteger
    LIST_END
    (
       ENTITY_START
        ('remark' remark=EString STATEMENT_END)?
        (
            'constraints' LIST_START 
            constraints+=Constraint 
            (LIST_SEPARATOR constraints+=Constraint)* 
            LIST_END 
            STATEMENT_END
        )?
      ENTITY_END 
    )? 
    STATEMENT_END
    ;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

enum ParameterType returns analysisactivitydescription::ParameterType:
				STRING = 'STRING' | INTEGER = 'INTEGER' | REAL = 'REAL';

    
Constraint returns analysisactivitydescription::Constraint:
	'constraint' name=Identifier
;


CommandLineTool returns analysisactivitydescription::CommandLineTool:
	'executable'
	name=EString
	ENTITY_START
		('remark' remark=EString STATEMENT_END)?
		('redirecting'
		ENTITY_START
		( 
		  ('stdin' 'from' standardInputStream=[analysisactivitydescription::InputDataset|EString] STATEMENT_END)?
		  & ('stdout' 'to' standardOutputStream=[analysisactivitydescription::OutputDataset|EString] STATEMENT_END)?
		  & ('stderr' 'to' standardErrorStream=[analysisactivitydescription::OutputDataset|EString] STATEMENT_END)?
        )
        ENTITY_END
        )?
        'commandLineTemplate' LIST_START commandLineTemplate+=CommandLineEntryList ( LIST_SEPARATOR commandLineTemplate+=CommandLineEntryList)* LIST_END 

		('returns' ENTITY_START exitCodes+=ExitCode ( exitCodes+=ExitCode)* ENTITY_END )?
	ENTITY_END;

FilePath returns analysisactivitydescription::FilePath:
	EString /* TODO: implement this rule and an appropriate IValueConverter */;

ExitCode returns analysisactivitydescription::ExitCode:
	code=EBigInteger 
	'if'  
    status=TerminationStatus	
	(reportMessage=EString)?
	STATEMENT_END
    ;

ToolNameCommandLineEntry returns analysisactivitydescription::ToolNameCommandLineEntry:
	{analysisactivitydescription::ToolNameCommandLineEntry}
	'toolname'
	(PIPE_TO manipulators+=StringListManipulator)*
    ;

LiteralCommandLineEntryList returns analysisactivitydescription::LiteralCommandLineEntryList:
	{analysisactivitydescription::LiteralCommandLineEntryList}
	'literals'
	LIST_START literals+=EString ( LIST_SEPARATOR literals+=EString)* LIST_END
	( PIPE_TO manipulators+=StringListManipulator)*
    ;

DatasetCommandLineEntryList returns analysisactivitydescription::DatasetCommandLineEntryList:
	'dataset'
	dataset=[analysisactivitydescription::Dataset|EString]
	( PIPE_TO manipulators+=StringListManipulator)*
	;

ParameterCommandLineEntryList returns analysisactivitydescription::ParameterCommandLineEntryList:
	'parameter' 
	parameter=[analysisactivitydescription::Parameter|EString]
	(PIPE_TO manipulators+=StringListManipulator)*
	;
	


Join returns slm::Join:
	'Join' delimiter=EString;

PrependEach returns slm::PrependEach:
	'PrependEach' value=EString;

AppendEach returns slm::AppendEach:
	'AppendEach' value=EString;

AppendListWith returns slm::AppendListWith:
	'AppendListWith' value=EString;

PrependListWith returns slm::PrependListWith:
	'PrependListWith' value=EString;

enum TerminationStatus returns analysisactivitydescription::TerminationStatus:
				SUCCEEDED = 'SUCCEEDED' | FAILED = 'FAILED';
				

terminal ENTITY_START: '{';
terminal ENTITY_END: '}';
terminal STATEMENT_END: ';';
				
terminal LIST_START: '[';
terminal LIST_END: ']';
terminal LIST_SEPARATOR : ',';

terminal PIPE_TO : '|';


terminal MULTILINE_STRING:
            "'''" -> "'''" 
        ;
        
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') (("-")?('a'..'z'|'A'..'Z'|'_'|'0'..'9'))*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING:
            '"' ( '\\' .  | !('\\'|'"') )* '"' |
            "'" ( '\\' .  | !('\\'|"'") )* "'"
        ;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
