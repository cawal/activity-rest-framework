/**
 * generated by Xtext 2.14.0
 */
package br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.tests;

import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Activity;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.tests.AnalysisActivityDSLInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AnalysisActivityDSLInjectorProvider.class)
@SuppressWarnings("all")
public class AnalysisActivityDSLParsingTest {
  @Inject
  private ParseHelper<Activity> parseHelper;
  
  @Test
  public void passingTest() {
  }
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("activity gene-chart-report {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("on {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("dataset gene-id-table : \'text/tsv\' [1,1];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("with {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter email : STRING [1,1];");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter count-cutoff : INTEGER [1,1] = [\'1\'];");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter threshold : REAL [1,1] = [\'2.0\'];");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter categories-in-result : STRING [1,-1];");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter gene-identifier-type : STRING [1,1];");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("parameter column-name : STRING [1,1];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("produces {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("dataset output : \'text/tsv\' [1,1];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("using executable \"geas-david-chart-report-dataset.py\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("commandLineTemplate [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter email");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--email\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter gene-identifier-type ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--id-type\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter categories-in-result ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--categories-in-result\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("dataset gene-id-table");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--input\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter column-name");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--column-name\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter threshold");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--threshold\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("parameter count-cutoff");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--cutoff\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("dataset output");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("| PrependListWith \"--output\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("returns {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("0 if SUCCEEDED;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("2 if FAILED \'Bad invocation parameters.\';");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Activity result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
