/**
 * generated by Xtext 2.14.0
 */
package br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.tests;

import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Activity;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.textualdsl.tests.AnalysisActivityDSLInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AnalysisActivityDSLInjectorProvider.class)
@SuppressWarnings("all")
public class AnalysisActivityDSLParsingTest {
  @Inject
  private ParseHelper<Activity> parseHelper;
  
  @Test
  public void passingTest() {
  }
  
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Activity \'teste\' {");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("description ");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("\'This activity lists the directories.\'");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("parameters [");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("Parameter \"dir\" {");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("minimumCardinality 1");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("maximumCardinality 1");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("parameterType REAL");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("outputDatasets [");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("Dataset \"list\" {");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("minimumCardinality 1");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("maximumCardinality 1");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("tool CommandLineTool \'ls\' {");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("executablePath \"ls/s\"");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("standardOutputStream list");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("commandLineTemplate [ ");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("ToolNameCommandLineEntry {},");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("LiteralCommandLineEntryList {");
      _builder.newLine();
      _builder.append("\t\t                ");
      _builder.append("literals [\"teste\" , \"Other String\" ] } ,");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("ParameterCommandLineEntryList{");
      _builder.newLine();
      _builder.append("\t\t                ");
      _builder.append("parameter dir");
      _builder.newLine();
      _builder.append("\t\t                ");
      _builder.append("manipulators [");
      _builder.newLine();
      _builder.append("\t\t                    ");
      _builder.append("PrependListWith \'first item of list\'");
      _builder.newLine();
      _builder.append("\t\t                ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t        ");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      final Activity result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
