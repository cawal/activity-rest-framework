/*
 * generated by Xtext 2.18.0
 */
package br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.ide.contentassist.antlr;

import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.ide.contentassist.antlr.internal.InternalDSLSyntaxParser;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.services.DSLSyntaxGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLSyntaxParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLSyntaxGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLSyntaxGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeploymentAccess().getGroup(), "rule__Deployment__Group__0");
			builder.put(grammarAccess.getServiceContainerAccess().getGroup(), "rule__ServiceContainer__Group__0");
			builder.put(grammarAccess.getServiceContainerAccess().getGroup_5(), "rule__ServiceContainer__Group_5__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_5(), "rule__Service__Group_5__0");
			builder.put(grammarAccess.getContactAccess().getGroup(), "rule__Contact__Group__0");
			builder.put(grammarAccess.getContactAccess().getGroup_5(), "rule__Contact__Group_5__0");
			builder.put(grammarAccess.getDeploymentAccess().getServiceAssignment_3(), "rule__Deployment__ServiceAssignment_3");
			builder.put(grammarAccess.getDeploymentAccess().getContainerAssignment_5(), "rule__Deployment__ContainerAssignment_5");
			builder.put(grammarAccess.getDeploymentAccess().getContactInformationAssignment_6(), "rule__Deployment__ContactInformationAssignment_6");
			builder.put(grammarAccess.getServiceContainerAccess().getNameAssignment_1(), "rule__ServiceContainer__NameAssignment_1");
			builder.put(grammarAccess.getServiceContainerAccess().getBaseUrlAssignment_4(), "rule__ServiceContainer__BaseUrlAssignment_4");
			builder.put(grammarAccess.getServiceContainerAccess().getDescriptionAssignment_5_1(), "rule__ServiceContainer__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getApiVersionAssignment_4(), "rule__Service__ApiVersionAssignment_4");
			builder.put(grammarAccess.getServiceAccess().getDescriptionAssignment_5_1(), "rule__Service__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getContactAccess().getNameAssignment_1(), "rule__Contact__NameAssignment_1");
			builder.put(grammarAccess.getContactAccess().getEmailAssignment_4(), "rule__Contact__EmailAssignment_4");
			builder.put(grammarAccess.getContactAccess().getUrlAssignment_5_1(), "rule__Contact__UrlAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLSyntaxGrammarAccess grammarAccess;

	@Override
	protected InternalDSLSyntaxParser createParser() {
		InternalDSLSyntaxParser result = new InternalDSLSyntaxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLSyntaxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLSyntaxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
