/*
 * generated by Xtext 2.18.0
 */
package br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.serializer;

import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.Contact;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.Deployment;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.DeploymentModelPackage;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.Service;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.ServiceContainer;
import br.usp.ffclrp.dcm.lssb.activityrest.deploymentmodel.services.DSLSyntaxGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class DSLSyntaxSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DSLSyntaxGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeploymentModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeploymentModelPackage.CONTACT:
				sequence_Contact(context, (Contact) semanticObject); 
				return; 
			case DeploymentModelPackage.DEPLOYMENT:
				sequence_Deployment(context, (Deployment) semanticObject); 
				return; 
			case DeploymentModelPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case DeploymentModelPackage.SERVICE_CONTAINER:
				sequence_ServiceContainer(context, (ServiceContainer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Contact returns Contact
	 *
	 * Constraint:
	 *     (name=EString email=EString url=URL?)
	 */
	protected void sequence_Contact(ISerializationContext context, Contact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Deployment returns Deployment
	 *
	 * Constraint:
	 *     (service=Service container=ServiceContainer contactInformation=Contact?)
	 */
	protected void sequence_Deployment(ISerializationContext context, Deployment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceContainer returns ServiceContainer
	 *
	 * Constraint:
	 *     (name=EString baseUrl=URL description=EString?)
	 */
	protected void sequence_ServiceContainer(ISerializationContext context, ServiceContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=EString apiVersion=EString description=EString?)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
