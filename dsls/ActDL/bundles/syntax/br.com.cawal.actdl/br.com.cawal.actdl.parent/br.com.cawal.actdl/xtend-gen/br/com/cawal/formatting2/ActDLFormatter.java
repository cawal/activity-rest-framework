/**
 * generated by Xtext 2.25.0
 */
package br.com.cawal.formatting2;

import br.com.cawal.services.ActDLGrammarAccess;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Activity;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Constraint;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.FunctionalEntity;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.InputDataset;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.OutputDataset;
import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Parameter;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ActDLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ActDLGrammarAccess _actDLGrammarAccess;
  
  protected void _format(final Activity activity, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = activity.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
    EList<InputDataset> _inputDatasets = activity.getInputDatasets();
    for (final InputDataset inputDataset : _inputDatasets) {
      document.<InputDataset>format(inputDataset);
    }
    EList<OutputDataset> _outputDatasets = activity.getOutputDatasets();
    for (final OutputDataset outputDataset : _outputDatasets) {
      document.<OutputDataset>format(outputDataset);
    }
    document.<FunctionalEntity>format(activity.getFunctionalEntity());
  }
  
  protected void _format(final Parameter parameter, @Extension final IFormattableDocument document) {
    EList<Constraint> _constraints = parameter.getConstraints();
    for (final Constraint constraint : _constraints) {
      document.<Constraint>format(constraint);
    }
  }
  
  public void format(final Object activity, final IFormattableDocument document) {
    if (activity instanceof XtextResource) {
      _format((XtextResource)activity, document);
      return;
    } else if (activity instanceof Activity) {
      _format((Activity)activity, document);
      return;
    } else if (activity instanceof Parameter) {
      _format((Parameter)activity, document);
      return;
    } else if (activity instanceof EObject) {
      _format((EObject)activity, document);
      return;
    } else if (activity == null) {
      _format((Void)null, document);
      return;
    } else if (activity != null) {
      _format(activity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(activity, document).toString());
    }
  }
}
