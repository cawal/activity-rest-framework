/*
 * generated by Xtext 2.25.0
 */
package br.com.cawal.tests

import br.usp.ffclrp.dcm.lssb.restaurant.analysisactivitydescription.Activity
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(ActDLInjectorProvider)
class ActDLParsingTest {
	@Inject
	ParseHelper<Activity> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
		activity gene-chart-report {
		    on {
		        dataset gene-id-table : 'text/tsv' [1,1];
		    }
		    with {
		        parameter email : STRING [1,1];
		        parameter count-cutoff : INTEGER [1,1] = ['1'];
		        parameter threshold : REAL [1,1] = ['2.0'];
		        parameter categories-in-result : STRING [1,-1];
		        parameter gene-identifier-type : STRING [1,1];
		        parameter column-name : STRING [1,1];
		    }
		    produces {
		        dataset output : 'text/tsv' [1,1];
		    }
		    using executable "geas-david-chart-report-dataset.py" {
		        commandLineTemplate [ 
		            parameter email
		                | PrependListWith "--email",
		            parameter gene-identifier-type 
		                | PrependListWith "--id-type",
		            parameter categories-in-result 
		                | PrependListWith "--categories-in-result",
		            dataset gene-id-table
		                | PrependListWith "--input",
		            parameter column-name
		                | PrependListWith "--column-name",
		            parameter threshold
		                | PrependListWith "--threshold",
		            parameter count-cutoff
		                | PrependListWith "--cutoff",
		            dataset output
		                | PrependListWith "--output"
		        ]
		        returns {
		            0 if SUCCEEDED;
		            2 if FAILED 'Bad invocation parameters.';
		        }
		    }
		}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
