-- @nsURI aadl=http://dcm.ffclrp.usp.br/lssb/metamodels/analysis-activity-description.ecore
-- @nsURI slm=http://dcm.ffclrp.usp.br/lssb/metamodels/string-list-manipulator.ecore
-- @nsURI openapi=http://som.uoc.edu/openapi/2.0.0


module aadl2openAPI;
create OUT: openapi from IN: aadl;

helper def: port(): Integer =
	8081;

helper def: host(): String =
	'kode.ffclrp.usp.br:' + thisModule.port();

helper def: basePath(path: String): String =
	'/' + path ;

helper def: apiVersion(): String =
	'0.8.0';

helper def: contact(): String =
	'ricardo.cawal@gmail.com';

--- This map helps when setting the type of a Schema from the Parameter::type
helper def: typeMap : Map(String, String) =
	Map {
		('STRING','string'),
		('REAL', 'number'),
		('INTEGER','integer'),
		('BOOLEAN','boolean')
	};

	
helper def: stringSchema : openapi!Schema = OclUndefined; 
	
helper def: primitiveTypeSchemaMap : Map(String, openapi!Schema) =
	Map {
		('STRING',thisModule.stringShema)
--		('REAL', 'number'),
--		('INTEGER','integer'),
--		('BOOLEAN','boolean')
	};

--entrypoint rule start(){
--	to	
--		stringSchema : openapi!Schema(
--			type <- #string
--		)
--	do {
--		thisModule.stringSchema <- stringSchema;
--	}
--}

	
endpoint rule finish(){
    do {
        'Finished'.debug();
    }
}

rule Activity {
	from
		activity: aadl!Activity in IN
	using {
	
	}
	to
		root : openapi!Root (
			api <-api,
			schemas <- OclUndefined,
			paramters <- OclUndefined,
			responses <- OclUndefined
		),
		
		apiInfo: openapi!Info (
			title <- activity.name,
			version <- thisModule.apiVersion(),
			license <- OclUndefined,
			termsOfService <- '',
			description <- if activity.remark.oclIsUndefined() then
								''
							else activity.remark endif
		),
		
		api: openapi!API (
			swagger <- '2.0',
			host <- thisModule.host(),
			basePath <- thisModule.basePath(activity.name),
			
			schemes <- 'http',
			consumes <- 'application/json',
			consumes <- 'application/xml',
			produces <- 'application/json',
			produces <- 'application/xml',
			info <- apiInfo,
			
			paths <- rootPath,
			paths <- newAnalysisCollectionPath,
			
			paths <-  nonExecutedAnalysisPath,
			paths <- activity.parameters->collect(p |
			    thisModule.resolveTemp(p,'nonExecutedAnalysisPath')),
			    
			paths <- activity.inputDatasets->collect(d |
			    thisModule.resolveTemp(d,'nonExecutedAnalysisPath')),
			
			
			paths <- succededAnalysisPath,
			paths <- activity.parameters->collect(p |
			    thisModule.resolveTemp(p,'succeededAnalysisPath')),
			paths <- activity.inputDatasets->collect(d |
			    thisModule.resolveTemp(d,'succeededAnalysisPath')),
			paths <- activity.outputDatasets->collect(d |
			    thisModule.resolveTemp(d,'succeededAnalysisPath')),
			
			paths <- failedAnalysisPath,
			paths <- activity.parameters->collect(p |
			    thisModule.resolveTemp(p,'failedAnalysisPath')),
			paths <- activity.inputDatasets->collect(d |
			    thisModule.resolveTemp(d,'failedAnalysisPath')),
			

			
			definitions <- activityDefinition,
			definitions <- parameterSetDefinition,
			definitions <- activity.parameters->collect(p |
			    thisModule.resolveTemp(p,'schema')),
			definitions <- fileDefinition,
			definitions <- jobInstanceDefinition
			
--			parameters <- activityIdentifier,
			
--			responses <- okResponse,
--			responses <- deleteOkResponse
		),
		
		-- Schemas
		activityDefinition: openapi!Schema (
			referenceName <- 'AnalysisActivity',
			type <- #object,
			declaringContext <- api,
			properties <- analysisIdProperty,
			properties <- analysisStateProperty,
			properties <- errorReportProperty
		),
		analysisIdProperty: openapi!Property (
			referenceName <- 'id',
			schema <- stringSchema
		),
		analysisStateProperty: openapi!Property (
			referenceName <- 'state',
			schema <- stateSchema 
		),
		errorReportProperty: openapi!Property (
		    referenceName <- 'errorReport',
		    schema <- stringSchema
		),
		
		
		parameterSetDefinition :  openapi!Schema (
    	    referenceName <- 'ParameterMap',
			type <- #object,
			declaringContext <- api,
    	    properties <- activity.parameters->collect(p |
			    thisModule.resolveTemp(p,'property'))
    	        ->flatten()
    	),
		
		
		jobInstanceDefinition: openapi!Schema (
			referenceName <- 'JobInstance',
			type <- #object,
			declaringContext <- api,
			properties <- jobIdProperty,
			properties <- jobStateProperty,
			properties <- jobErrorReportProperty
			-- required <- jobIdProperty
		),
		jobIdProperty: openapi!Property (
			referenceName <- 'id',
			schema <- stringSchema
		),
		jobStateProperty: openapi!Property (
			referenceName <- 'state',
			schema <- stateSchema 
		),
		jobErrorReportProperty: openapi!Property (
		    referenceName <- 'errorReport',
		    schema <- stringSchema
		),
		
		
		fileDefinition: openapi!Schema (
			referenceName <- 'File',
			type <- #object,
			declaringContext <- api,
			properties <- nameProperty,
			properties <- contentTypeProperty,
			properties <- fileContentProperty
		),
		nameProperty : openapi!Property (
			referenceName <- 'name',
			schema <- stringSchema
		),
		contentTypeProperty : openapi!Property (
			referenceName <- 'contentType',
			schema <- stringSchema
		),
		fileContentProperty : openapi!Property (
			referenceName <- 'content',
			schema <- fileContentsSchema
		),
		
		
		stringSchema: openapi!Schema (
			type <- #string
		),
		stateSchema: openapi!Schema (
			type <- #string,
			enum <- 'CREATED',
			enum <- 'READY',
			enum <- 'RUNNING',
			enum <- 'SUCCEEDED',
			enum <- 'FAILED',
			enum <- 'REMOVED'
		),
		fileContentsSchema : openapi!Schema (
			type <- #string,
			format <- 'application/octet-stream'
		),
		genericParameterValueSchema : openapi!Schema (
			type <- #unspecified
		),
		activityIdentifierParameter: openapi!Parameter (
			name <- 'id',
			type <- 'string',
			required <- true,
			description <- 'The analysis activity identifier.',
			location <- #path
		),
		fileIdentifierParameter: openapi!Parameter (
			name <- 'file-id',
			type <- 'string',
			required <- true,
			description <- 'The dataset\' file identifier.',
			location <- #path
		),
		
		-- paths
		rootPath: openapi!Path (
			relativePath <- '/',
			get <- getRoot
		),
		getRoot : openapi!Operation (
			operationId <- 'get-service-root-resource',
			description <- activity.remark,
			responses <- getRootOkResponse			
		),
		
    	newAnalysisCollectionPath: openapi!Path (
			relativePath <- '/new-analyses',
			post <- createNewAnalysis
		),
		createNewAnalysis : openapi!Operation (
			operationId <- 'create-new-analysis-resource',
			description <- activity.remark,
			responses <- getActivityOkResponse
		),
		
		
		nonExecutedAnalysisPath: openapi!Path (
			relativePath <- '/new-analyses/{id}',
			parameters <- activityIdentifier,
			get <- getInNewActivity,
			delete <- deleteNewAnalysis
		),
		getInNewActivity : openapi!Operation (
			operationId <- 'get-non-executed-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- getActivityOkResponse			
		),
		deleteNewAnalysis : openapi!Operation (
			operationId <- 'remove-non-executed-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- deleteActivityOkResponse			
		),	
		
		
		succededAnalysisPath: openapi!Path (
			relativePath <- '/succeded-analyses/{id}',
			parameters <- activityIdentifier,
			get <- getSuccededAnalysis,
			delete <- deleteSuccededAnalysis
		),
		getSuccededAnalysis : openapi!Operation (
			operationId <- 'get-succeeded-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- getActivityOkResponse			
		),
		deleteSuccededAnalysis : openapi!Operation (
			operationId <- 'remove-succeded-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- deleteActivityOkResponse			
		),	
		
		
		failedAnalysisPath: openapi!Path (
			relativePath <- '/failed-analyses/{id}',
			parameters <- activityIdentifier,
			get <- getFailedAnalysis,
			delete <- deleteFailedAnalysis
		),
		getFailedAnalysis : openapi!Operation (
			operationId <- 'get-failed-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- getActivityOkResponse			
		),
		deleteFailedAnalysis : openapi!Operation (
			operationId <- 'remove-failed-analysis',
			description <- activity.remark,
			parameters <- activityIdentifier,
			responses <- deleteActivityOkResponse			
		),
		
		-- common parameters
		activityIdentifier: openapi!Parameter (
			name <- 'id',
			type <- 'string',
			required <- true,
			description <- 'The analysis activity identifier.',
			location <- #path
		),
		
			
			
		
		
		-- commom responses
		getRootOkResponse: openapi!Response (
			code <- '200',
			description <- 'Retrieve links for other accessible resources',
			declaringContext <- api
		),
		
		getActivityOkResponse: openapi!Response (
			code <- '200',
			description <- 'Analysis activity representation is retrieved',
			schema <- activityDefinition,
			declaringContext <- api
		),
		
		deleteActivityOkResponse: openapi!Response (
			code <- '200',
			description <- 'Analysis activity is removed from server.'
		)
		
		
		
	do {
	}
}




--- All elements created from a Parameter Element
rule Parameter {
	from 
		parameter : aadl!Parameter
    to
    	schema : openapi!Schema (
    	    referenceName <- parameter.name,
    	    properties <- localProperty,
			declaringContext <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'api'
			),
			type <- #object

    	),
    	property : openapi!Property (
    	    referenceName <- parameter.name,
			schema <- propertySchema -- thisModule.getJsonSchemaFromParameter(parameter)
    	),
    	localProperty : openapi!Property (
    	    referenceName <- parameter.name,
			schema <- propertySchema
    	),
		
		propertySchema : openapi!Schema (),
		
		arrayItemSchema : openapi!Schema(),
		
    	nonExecutedAnalysisPath: openapi!Path (
			relativePath <- '/new-analyses/{id}/parameters/' + parameter.name,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getInNewActivity,
			put <- putNewAnalysis
		),
		succeededAnalysisPath: openapi!Path (
			relativePath <- '/succeded-analyses/{id}/parameters/' + parameter.name,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getSucceededAnalysis
		),
		failedAnalysisPath: openapi!Path (
			relativePath <- '/failed-analyses/{id}/parameters/' + parameter.name,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getFailedAnalysis
		),
		getInNewActivity : openapi!Operation (
			operationId <- 'get-' + parameter.name + 'from-non-executed-analysis',
			description <- parameter.remark,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- notFoundResponse,
			responses <- getOkResponse			
		),
		getSucceededAnalysis : openapi!Operation (
			operationId <- 'get-' + parameter.name + 'from-succeded-analysis',
			description <- parameter.remark,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- notFoundResponse,
			responses <- getOkResponse			
		),
		getFailedAnalysis : openapi!Operation (
			operationId <- 'get-' + parameter.name + 'from-failed-analysis',
			description <- parameter.remark,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- notFoundResponse,
			responses <- getOkResponse			
		),
		putNewAnalysis : openapi!Operation (
			operationId <- 'put-' + parameter.name + 'for-non-executed-analysis',
			description <- parameter.remark,
			parameters <- thisModule.resolveTemp(
			    	parameter.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- putOkResponse,
			responses <- putBadRequestResponse,
			responses <- notFoundResponse
		),
		getOkResponse: openapi!Response (
			code <- '200',
			description <- 'Parameter value is retrieved',
			schema <- schema
		),
		putOkResponse: openapi!Response (
			code <- '200',
			description <- 'Parameter value is set'
		),
		putBadRequestResponse: openapi!Response (
			code <- '400',
			description <- 'Bad values for parameter.'
		),
		notFoundResponse: openapi!Response (
			code <- '404',
			description <- 'Resource not found.'
		)

    do {
    	if (parameter.maximumCardinality.toString() = '1') {
    		propertySchema.type <- thisModule.typeMap.get(parameter.parameterType.toString()); 
    	} else {
    		propertySchema.type <- #array.debug();
    		propertySchema.items <- arrayItemSchema;
    		arrayItemSchema.type <- thisModule.typeMap.get(parameter.parameterType.toString());
    	}
        -- return
        schema;
    }
}






rule InputDatasetSingleFile {
	from
		dataset: aadl!InputDataset ( 1 = dataset.maximumCardinality)

	to 
		nonExecutedAnalysisPath: openapi!Path (
			relativePath <- '/new-analyses/{id}/inputs/' + dataset.name,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getInNewActivity,
			put <- putInNewActivity,
			delete <- deleteInNewActivity
		),
		succeededAnalysisPath: openapi!Path (
			relativePath <- '/succeeded-analyses/{id}/inputs/' + dataset.name,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getInSuccededActivity
		),
		failedAnalysisPath: openapi!Path (
			relativePath <- '/failed-analyses/{id}/inputs/' + dataset.name,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getInFailedActivity
		),
		
		
		
		getInNewActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		putInNewActivity : openapi!Operation (
			operationId <- 'put-' + dataset.name + '-into-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		deleteInNewActivity : openapi!Operation (
			operationId <- 'delete-' + dataset.name + '-into-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		getInSuccededActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-succeded-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		
		getInFailedActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-failed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		okResponse: openapi!Response (
			code <- '200',
			description <- 'Dataset value is retrieved',
			schema <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileDefinition'
			)
		)
}


rule InputDatasetMultipleFile {
	from
		dataset: aadl!InputDataset (not (1 = dataset.maximumCardinality))

	to 
		nonExecutedAnalysisPath: openapi!Path (
			relativePath <- '/new-analyses/{id}/inputs/' + dataset.name + '/{fileId}',
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileIdentifierParameter'
			),
			get <- getInNewActivity,
			put <- putInNewActivity,
			delete <- deleteInNewActivity
		),
		succeededAnalysisPath: openapi!Path (
			relativePath <- '/succeeded-analyses/{id}/inputs/' + dataset.name+ '/{fileId}',
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileIdentifierParameter'
			),
			get <- getInSuccededActivity
		),
		failedAnalysisPath: openapi!Path (
			relativePath <- '/failed-analyses/{id}/inputs/' + dataset.name+ '/{fileId}',
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileIdentifierParameter'
			),
			get <- getInFailedActivity
		),
		
		
		
		getInNewActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		putInNewActivity : openapi!Operation (
			operationId <- 'put-' + dataset.name + '-into-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		deleteInNewActivity : openapi!Operation (
			operationId <- 'delete-' + dataset.name + '-into-non-executed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		getInSuccededActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-succeded-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		
		getInFailedActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-failed-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		
		okResponse: openapi!Response (
			code <- '200',
			description <- 'Dataset value is retrieved',
			schema <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileDefinition'
			)
		)
}

rule OutputDatasetSingleFile {
	from
		dataset: aadl!OutputDataset ( 1 = dataset.maximumCardinality)

	to 
		
		succeededAnalysisPath: openapi!Path (
			relativePath <- '/succeeded-analyses/{id}/outputs/' + dataset.name,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			get <- getInSuccededActivity
		),
		getInSuccededActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-succeded-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		okResponse: openapi!Response (
			code <- '200',
			description <- 'Dataset value is retrieved',
			schema <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileDefinition'
			)
		)
}


rule OutputDatasetMultipleFile {
	from
		dataset: aadl!OutputDataset (not (1 = dataset.maximumCardinality))

	to 
		succeededAnalysisPath: openapi!Path (
			relativePath <- '/succeeded-analyses/{id}/outputs/' + dataset.name+ '/{fileId}',
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileIdentifierParameter'
			),
			get <- getInSuccededActivity
		),
		getInSuccededActivity : openapi!Operation (
			operationId <- 'get-' + dataset.name + '-from-succeded-analysis',
			description <- dataset.remark,
			parameters <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'activityIdentifierParameter'
			),
			responses <- okResponse			
		),
		okResponse: openapi!Response (
			code <- '200',
			description <- 'Dataset value is retrieved',
			schema <- thisModule.resolveTemp(
			    	dataset.refImmediateComposite(),'fileDefinition'
			)
		)
}